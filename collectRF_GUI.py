# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'oscilloscopeUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox


import sys

from teksocketUSB import TekSocketUSB
import time
import math
from datetime import datetime, timedelta

from teksocketOriginal import TekSocket

# have to define outside of class (class is a template)
f = open("test.txt", "w")
f.close()
f = open("test.txt", "a")

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        # main window
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(822, 539)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.confirmButton = QtWidgets.QPushButton(self.centralwidget)
        self.confirmButton.setGeometry(QtCore.QRect(630, 420, 131, 61))
        self.confirmButton.setObjectName("confirmButton")
        self.confirmButton.clicked.connect(self.button_clicked)

        self.status = QtWidgets.QProgressBar(self.centralwidget)
        self.status.setGeometry(QtCore.QRect(60, 430, 541, 31))
        self.status.setObjectName("status")
        self.status.setVisible(False)

        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(50, 30, 711, 351))
        self.groupBox.setObjectName("groupBox")

        self.time = QtWidgets.QTextEdit(self.groupBox)
        self.time.setGeometry(QtCore.QRect(440, 40, 81, 41))
        self.time.setObjectName("time")

        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(30, 40, 351, 41))
        self.label.setObjectName("duration")

        self.increment = QtWidgets.QTextEdit(self.groupBox)
        self.increment.setGeometry(QtCore.QRect(600, 40, 71, 41))
        self.increment.setObjectName("increment")

        # word labels
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(30, 120, 371, 31))
        self.label_2.setObjectName("name")

        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(30, 200, 281, 31))
        self.label_3.setObjectName("startf")

        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(30, 280, 271, 31))
        self.label_4.setObjectName("stopf")

        # user input boxes
        self.outputFile = QtWidgets.QTextEdit(self.groupBox)
        self.outputFile.setGeometry(QtCore.QRect(440, 120, 231, 41))
        self.outputFile.setObjectName("outputFile")

        self.start_F = QtWidgets.QTextEdit(self.groupBox)
        self.start_F.setGeometry(QtCore.QRect(440, 200, 81, 41))
        self.start_F.setObjectName("start_F")

        self.stop_F = QtWidgets.QTextEdit(self.groupBox)
        self.stop_F.setGeometry(QtCore.QRect(440, 280, 81, 41))
        self.stop_F.setObjectName("stop_F")
        MainWindow.setCentralWidget(self.centralwidget)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def button_clicked(self):
        # get data from text fields
        duration = self.time.toPlainText()
        unit = self.increment.toPlainText()
        outputFile_name = self.outputFile.toPlainText()
        startF = self.start_F.toPlainText()
        stopF = self.stop_F.toPlainText()

        # check if fields are appropriately filled in
        if duration == "" or  unit == "" or outputFile_name == "" or startF == "" or stopF == "":
            dlg = QMessageBox(MainWindow)
            dlg.setWindowTitle("Alert!")
            dlg.setText("Fill in all fields before clicking confirm!")
            dlg.exec()

        else:
            self.confirmButton.setText("PROCESSING")

            # swap start and stop frequencies
            if int(startF) > int(stopF):
                dlg = QMessageBox(MainWindow)
                dlg.setWindowTitle("Alert!")
                dlg.setText("Switching startF and stopF")
                dlg.exec()
                transition = startF
                startF = stopF
                stopF = transition

            # write data to temporary text file
            global f
            f.write(str(duration) + "\n")
            f.write(unit + "\n")
            f.write(outputFile_name + "\n")
            f.write(str(startF) + "\n")
            f.write(str(stopF) + "\n")
            f.close()
            global filled
            filled = True

            self.sendData()

    def sendData(self):
        # open variables file
        f = open("test.txt", "r")
        content = f.readlines()
        # setup connection to tek device USB: tek = TekSocketUSB('0x0699', '0x052C', 'B012380')
        tek = TekSocket('128.95.4.89')
        # confirm settings (tekdevice, frequency, frequency)
        confirmed = self.confirm_mdo_settings(tek, int(content[3]), int(content[4]))
        # start collection
        if (confirmed):
            response = tek.command('FPAnel: PRESS <RUnstop>')
            self.start_collection(int(content[0]), content[1], content[2], tek)

    def start_collection(self, duration, duration_unit, filename, tekdevice):
        # convert minutes and hours to seconds
        if (duration_unit == "m\n"):
            duration = duration * 60
        elif (duration_unit == "h\n"):
            duration = duration * 3600
        if duration == 0:
            print("invalid duration")
            return
        while 1:
            self.collect_data(duration, filename, tekdevice)
            return

    def collect_data(self, duration, filename, tekdevice):
        # output file
        f = open(filename.strip(), "w")
        f.truncate(0)  # clear previous file contents
        f.write('time, freq, dBm')
        f.write("\n")

        # commands saved for waking up RF channel
        #num_channels = self.command('WFMOutpre:WFMTYPe?')
        #print(num_channels)

        print("collecting data...")
        startTime = None
        endTime = datetime.now() + timedelta(seconds=duration)
        while 1:
            data = tekdevice.getData(['RF_AMPlitude'], start=0, stop=0)
            now = datetime.now()
            if startTime is None:
                startTime = now
            timeDiff = (now - startTime).total_seconds()
            Y = []
            Z = []

            pick = 7

            # extract freq and dBm data
            for a in data:  # a = [9.16346651e+08 1.70287000e-12]
                if pick % 7 == 0:  # take less data
                    Y.append(a[0])
                    Z.append((10 * math.log10(a[1]) + 30))  # dBm
                pick = pick + 1

            # sort points by frequency
            zipped = list(list(x) for x in sorted(zip(Y, Z)))
            Y = [i[0] for i in zipped]
            Z = [i[1] for i in zipped]

            # write to output
            for idx in range(len(Y)):
                f.write('{}, '.format(timeDiff))
                f.write('{}, '.format(Y[idx]))
                f.write('{}\n'.format(Z[idx]))

            # delay
            time.sleep(5)

            if datetime.now() >= endTime:
                break

        f.close()
        dlg = QMessageBox(MainWindow)
        dlg.setWindowTitle("Alert!")
        dlg.setText("**data collection finished**")
        dlg.exec()
        sys.exit(0)

    # confirm mdo settings
    def confirm_mdo_settings(self, tekdevice, in_start, in_stop):
        start = float(in_start) * pow(10, 6)
        stop = float(in_stop) * pow(10, 6)
        tekdevice.command("ACQuire:STATE {RUN}")
        tekdevice.command('RF:START {}'.format(start))
        tekdevice.command('RF:STOP {}'.format(stop))
        return True

    # for showing application
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.confirmButton.setText(_translate("MainWindow", "CONFIRM "))
        self.groupBox.setTitle(_translate("MainWindow",
                                          "                       --------------------------------PROGRAM OSCILLSCOPE INPUTS----------------------------------"))
        self.time.setHtml(_translate("MainWindow",
                                     "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                     "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                     "p, li { white-space: pre-wrap; }\n"
                                     "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
                                     "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label.setText(_translate("MainWindow",
                                      "<html><head/><body><p><span style=\" font-size:16pt;\">Duration (Format: [30] [s])</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:16pt;\">Name output file (include.csv)</span></p></body></html>"))
        self.label_3.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:16pt;\">Start frequency (mHz)</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:16pt;\">Stop frequency (mHz)</span></p></body></html>"))


# for running gui
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


# unused tekdevice methods for testing
# tekdevice.command('ETHERNET:IPADDRESS "123.121.13.214"'.format())
# tekdevice.command('ETHERnet:LXI:LAN:PASSWord:ENABle "ON"')
#tek.command('SET?' )
#tekdevice.command('RF:STOP {}'.format(stop))
